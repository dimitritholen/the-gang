{
  "templates": {
    "debug_critical": {
      "name": "Critical Bug Investigation",
      "patterns": [1, 2],
      "complexity": "intermediate",
      "template": "# Critical Bug Investigation\n\nYou are debugging a production-critical issue that requires systematic analysis and verification.\n\n## Problem Description\n\n{user_context}\n\n## Step-by-Step Analysis (Chain of Thought)\n\n### Step 1: Symptom Analysis\n- What are the observable symptoms?\n- When does the issue occur?\n- What are the error messages/logs?\n\n### Step 2: Hypothesis Generation\n- What are potential root causes?\n- What evidence supports each hypothesis?\n\n### Step 3: Investigation\n- Which code paths are involved?\n- What data/state is affected?\n\n### Step 4: Root Cause Identification\n- What is the underlying cause?\n- Why did this happen?\n\n## Proposed Solution\n\n{solution_here}\n\n## Verification (Chain of Verification)\n\n### Correctness Checks\n- [ ] Does the fix address the root cause?\n- [ ] Are there any edge cases not handled?\n- [ ] Could this introduce new bugs?\n\n### Production Safety\n- [ ] Is the fix backward compatible?\n- [ ] Are there rollback procedures?\n- [ ] What are the testing requirements?\n\n## Validated Fix\n\n{final_verified_solution}\n\n## Deployment Checklist\n\n- [ ] Unit tests added/updated\n- [ ] Integration tests pass\n- [ ] Peer review completed\n- [ ] Staging validation successful\n- [ ] Monitoring/alerts configured"
    },
    "architecture_design": {
      "name": "System Architecture Design",
      "patterns": [7, 5, 4],
      "complexity": "advanced",
      "template": "# System Architecture Design\n\n## Role Definition (Role-Based Prompting)\n\nYou are a Staff Software Architect with 10+ years experience designing scalable distributed systems. You specialize in cloud-native architectures, microservices, and event-driven systems.\n\n## System Requirements\n\n{user_context}\n\n## Multi-Objective Analysis (Multi-Objective Directional)\n\n### Primary Objectives (Weighted)\n1. **Scalability** (40%): Handle 10x growth\n2. **Reliability** (30%): 99.9% uptime SLA\n3. **Cost** (20%): Optimize infrastructure spend\n4. **Developer Experience** (10%): Ease of development\n\n### Trade-off Constraints\n- Scalability vs Cost: Auto-scaling increases costs\n- Reliability vs Complexity: Redundancy adds complexity\n- DX vs Performance: Abstractions may reduce performance\n\n## Architectural Approaches (Self-Consistency)\n\n### Approach 1: Microservices with Event Sourcing\n\n**Architecture:**\n{microservices_design}\n\n**Trade-off Analysis:**\n- Scalability: Excellent (9/10)\n- Reliability: Very Good (8/10)\n- Cost: Moderate (6/10)\n- DX: Moderate (6/10)\n\n**Rationale:** {why_this_approach}\n\n### Approach 2: Modular Monolith with CQRS\n\n**Architecture:**\n{modular_monolith_design}\n\n**Trade-off Analysis:**\n- Scalability: Good (7/10)\n- Reliability: Very Good (8/10)\n- Cost: Excellent (9/10)\n- DX: Very Good (8/10)\n\n**Rationale:** {why_this_approach}\n\n### Approach 3: Hybrid (Monolith + Microservices)\n\n**Architecture:**\n{hybrid_design}\n\n**Trade-off Analysis:**\n- Scalability: Very Good (8/10)\n- Reliability: Excellent (9/10)\n- Cost: Good (7/10)\n- DX: Good (7/10)\n\n**Rationale:** {why_this_approach}\n\n## Consensus Analysis\n\n### Common Elements\n- All approaches use {shared_pattern}\n- All require {shared_component}\n\n### Key Differences\n- Service boundaries: {differences}\n- Deployment strategy: {differences}\n- Data consistency: {differences}\n\n## Recommended Architecture\n\n{synthesized_optimal_design}\n\n### Weighted Score\n- Scalability: {score} × 0.4 = {weighted}\n- Reliability: {score} × 0.3 = {weighted}\n- Cost: {score} × 0.2 = {weighted}\n- DX: {score} × 0.1 = {weighted}\n- **Total: {total_score}/10**\n\n### Trade-off Justification\n\n{why_this_balances_objectives_best}\n\n## Implementation Roadmap\n\n### Phase 1: Foundation\n{phase1_tasks}\n\n### Phase 2: Core Services\n{phase2_tasks}\n\n### Phase 3: Scale & Optimize\n{phase3_tasks}"
    },
    "feature_implementation": {
      "name": "Feature Implementation Plan",
      "patterns": [12, 1, 2],
      "complexity": "intermediate",
      "template": "# Feature Implementation Plan\n\n## Feature Description\n\n{user_context}\n\n## Task Decomposition\n\n### Phase 1: Backend Foundation\n\n#### Task 1.1: Database Schema\n- [ ] Design schema for {entity}\n- [ ] Create migration files\n- [ ] Add indexes for {queries}\n\n#### Task 1.2: API Endpoints\n- [ ] POST /api/{resource} - Create\n- [ ] GET /api/{resource}/:id - Read\n- [ ] PUT /api/{resource}/:id - Update\n- [ ] DELETE /api/{resource}/:id - Delete\n\n#### Task 1.3: Business Logic\n- [ ] Validation rules\n- [ ] Authorization checks\n- [ ] Error handling\n\n### Phase 2: Frontend Implementation\n\n#### Task 2.1: UI Components\n- [ ] {ComponentName} component\n- [ ] Form validation\n- [ ] Loading/error states\n\n#### Task 2.2: State Management\n- [ ] API integration\n- [ ] Local state management\n- [ ] Cache invalidation\n\n#### Task 2.3: User Experience\n- [ ] Responsive design\n- [ ] Accessibility (WCAG AA)\n- [ ] Performance optimization\n\n### Phase 3: Testing & Documentation\n\n#### Task 3.1: Testing\n- [ ] Unit tests (>80% coverage)\n- [ ] Integration tests\n- [ ] E2E tests for critical paths\n\n#### Task 3.2: Documentation\n- [ ] API documentation\n- [ ] User guide\n- [ ] Developer notes\n\n## Implementation Details (Chain of Thought)\n\n### For Task 1.1: Database Schema\n\n**Step 1: Requirements Analysis**\n- What data needs to be stored?\n- What relationships exist?\n- What query patterns are expected?\n\n**Step 2: Schema Design**\n{schema_design}\n\n**Step 3: Migration Strategy**\n{migration_approach}\n\n### For Task 1.2: API Endpoints\n\n**Step 1: Endpoint Design**\n- RESTful conventions\n- Request/response formats\n- Status codes\n\n**Step 2: Validation Rules**\n{validation_logic}\n\n**Step 3: Error Handling**\n{error_strategy}\n\n## Verification Checklist (Chain of Verification)\n\n### Correctness\n- [ ] All requirements implemented?\n- [ ] Edge cases handled?\n- [ ] Error scenarios covered?\n\n### Security\n- [ ] Input validation complete?\n- [ ] Authorization checks in place?\n- [ ] SQL injection prevented?\n- [ ] XSS protection enabled?\n\n### Performance\n- [ ] Database queries optimized?\n- [ ] API response times <200ms?\n- [ ] Frontend bundle size <500KB?\n\n### Quality\n- [ ] Code follows style guide?\n- [ ] Tests written and passing?\n- [ ] Documentation complete?\n\n## Validated Implementation\n\n{final_code_and_tests}\n\n## Deployment Plan\n\n1. **Deploy Phase 1**: Backend without UI\n2. **Verify**: API tests pass in staging\n3. **Deploy Phase 2**: Frontend UI\n4. **Verify**: E2E tests pass\n5. **Monitor**: Check metrics for 24hrs\n6. **Complete**: Mark feature as released"
    },
    "security_audit": {
      "name": "Security Audit & Remediation",
      "patterns": [7, 2, 11],
      "complexity": "advanced",
      "template": "# Security Audit & Remediation\n\n## Role Definition\n\nYou are a Senior Security Engineer specializing in application security, with expertise in OWASP Top 10, secure coding practices, and vulnerability remediation.\n\n## Audit Scope\n\n{user_context}\n\n## Level 0: Initial Security Assessment\n\n### Code Review\n{initial_findings}\n\n### Vulnerability Scan\n{scan_results}\n\n### Configuration Review\n{config_issues}\n\n## Multi-Perspective Verification (Recursive Self-Improvement)\n\n### Perspective 1: OWASP Top 10 Analysis\n\n**A01 - Broken Access Control**\n- Finding: {issue}\n- Severity: {critical/high/medium/low}\n- Evidence: {code_location}\n\n**A02 - Cryptographic Failures**\n- Finding: {issue}\n- Severity: {severity}\n- Evidence: {code_location}\n\n**A03 - Injection**\n- Finding: {issue}\n- Severity: {severity}\n- Evidence: {code_location}\n\n{...continue for all OWASP categories}\n\n**Score: {score}/10**\n**Threshold: 8/10**\n\n### Perspective 2: Compliance & Standards\n\n**Data Protection**\n- GDPR compliance: {assessment}\n- Data encryption: {assessment}\n- Data retention: {assessment}\n\n**Authentication & Authorization**\n- MFA enabled: {yes/no}\n- Password policy: {assessment}\n- Session management: {assessment}\n\n**Score: {score}/10**\n**Threshold: 8/10**\n\n### Perspective 3: Infrastructure Security\n\n**Network Security**\n- Firewall rules: {assessment}\n- TLS configuration: {assessment}\n- API security: {assessment}\n\n**Score: {score}/10**\n**Threshold: 8/10**\n\n## Level 1: Remediation Plan\n\n### Critical Issues (Fix immediately)\n1. {issue_1}: {remediation_steps}\n2. {issue_2}: {remediation_steps}\n\n### High Priority (Fix within 1 week)\n1. {issue_1}: {remediation_steps}\n2. {issue_2}: {remediation_steps}\n\n### Medium Priority (Fix within 1 month)\n1. {issue_1}: {remediation_steps}\n\n## Re-Verification After Fixes\n\n### Perspective 1: OWASP (Post-Fix)\n**Score: {new_score}/10**\n**Improvement: +{delta}**\n\n### Perspective 2: Compliance (Post-Fix)\n**Score: {new_score}/10**\n**Improvement: +{delta}**\n\n### Perspective 3: Infrastructure (Post-Fix)\n**Score: {new_score}/10**\n**Improvement: +{delta}**\n\n## Convergence Check\n\n- All perspectives >= 8/10? {yes/no}\n- If NO → Level 2 improvements needed\n- If YES → Security audit passed\n\n## Final Security Report\n\n{production_ready_security_assessment}\n\n## Ongoing Security Measures\n\n- [ ] Automated security scanning in CI/CD\n- [ ] Regular dependency updates\n- [ ] Security training for team\n- [ ] Incident response plan\n- [ ] Regular penetration testing"
    },
    "refactoring_legacy": {
      "name": "Legacy Code Refactoring",
      "patterns": [12, 8, 6],
      "complexity": "expert",
      "template": "# Legacy Code Refactoring\n\n## Legacy System Analysis\n\n{user_context}\n\n## Decomposition Strategy (Task Decomposition)\n\n### Phase 1: Preparation & Safety\n\n#### Task 1.1: Characterization Tests\n- [ ] Identify critical user flows\n- [ ] Write high-level integration tests\n- [ ] Establish baseline behavior\n- [ ] Create test coverage report\n\n#### Task 1.2: Dependency Analysis\n- [ ] Map module dependencies\n- [ ] Identify circular dependencies\n- [ ] Document external integrations\n- [ ] List breaking points\n\n### Phase 2: Incremental Refactoring\n\n#### Task 2.1: Extract Core Logic\n- [ ] Identify business logic\n- [ ] Separate from infrastructure\n- [ ] Create domain models\n\n#### Task 2.2: Improve Modularity\n- [ ] Break monolithic functions\n- [ ] Apply SOLID principles\n- [ ] Reduce coupling\n\n#### Task 2.3: Modernize Patterns\n- [ ] Replace anti-patterns\n- [ ] Apply design patterns\n- [ ] Improve naming\n\n### Phase 3: Validation & Polish\n\n#### Task 3.1: Quality Gates\n- [ ] All tests pass\n- [ ] Code coverage maintained\n- [ ] Performance benchmarks met\n- [ ] No new technical debt\n\n## Draft 1: Initial Refactoring (Chain of Draft)\n\n{first_refactoring_attempt}\n\n## Critique 1\n\n**Issues Identified:**\n- Over-engineering: {specific_examples}\n- Broken compatibility: {specific_examples}\n- Performance regression: {specific_examples}\n\n## Draft 2: Revised Refactoring\n\n{improved_version}\n\n## Critique 2\n\n**Remaining Issues:**\n- {issue_1}\n- {issue_2}\n\n## Draft 3: Final Refactoring\n\n{polished_refactored_code}\n\n## Self-Reflection (Reflexion)\n\n### What Went Well\n- {success_1}\n- {success_2}\n\n### What Could Be Improved\n- {improvement_area_1}\n- {improvement_area_2}\n\n### Lessons Learned\n- {lesson_1}\n- {lesson_2}\n\n## Migration Plan\n\n### Week 1-2: Preparation\n- Deploy characterization tests to production\n- Monitor for 1 week to ensure stability\n- Create feature flags for gradual rollout\n\n### Week 3-4: Incremental Deployment\n- Deploy refactored Module A (10% traffic)\n- Monitor metrics for regressions\n- Gradually increase to 100%\n\n### Week 5-6: Full Migration\n- Deploy all refactored modules\n- Remove legacy code paths\n- Update documentation\n\n### Week 7: Validation\n- Verify all tests pass in production\n- Check performance metrics\n- Gather team feedback\n- Archive legacy code\n\n## Rollback Plan\n\n1. **Detect Issue**: Monitoring alerts or failed tests\n2. **Immediate Action**: Revert feature flags to 0%\n3. **Investigation**: Analyze logs and metrics\n4. **Fix**: Apply hotfix to refactored code\n5. **Retry**: Gradual rollout again"
    }
  },
  "selectionGuide": {
    "debug_critical": {
      "triggers": ["debug", "production", "critical", "bug", "fix"],
      "goals": ["DEBUG"],
      "quality": ["CORRECTNESS"],
      "complexity": ["basic", "intermediate"]
    },
    "architecture_design": {
      "triggers": ["architecture", "design", "system", "scalable", "distributed"],
      "goals": ["DESIGN"],
      "quality": ["PERFORMANCE", "MAINTAINABILITY"],
      "complexity": ["advanced", "expert"]
    },
    "feature_implementation": {
      "triggers": ["implement", "build", "create", "feature", "new"],
      "goals": ["CREATE"],
      "quality": ["CORRECTNESS"],
      "complexity": ["intermediate"]
    },
    "security_audit": {
      "triggers": ["security", "audit", "vulnerable", "OWASP", "pentest"],
      "goals": ["VALIDATE"],
      "quality": ["SECURITY", "CORRECTNESS"],
      "complexity": ["advanced"]
    },
    "refactoring_legacy": {
      "triggers": ["refactor", "legacy", "modernize", "migrate", "rewrite"],
      "goals": ["MIGRATE"],
      "quality": ["MAINTAINABILITY", "CORRECTNESS"],
      "complexity": ["expert"]
    }
  }
}
